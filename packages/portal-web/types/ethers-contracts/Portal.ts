/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type BtcTxProofStruct = {
  blockHeader: BytesLike;
  txId: BytesLike;
  txIndex: BigNumberish;
  txMerkleProof: BytesLike;
  rawTx: BytesLike;
};

export type BtcTxProofStructOutput = [
  string,
  string,
  BigNumber,
  string,
  string
] & {
  blockHeader: string;
  txId: string;
  txIndex: BigNumber;
  txMerkleProof: string;
  rawTx: string;
};

export interface PortalInterface extends utils.Interface {
  functions: {
    "btcVerifier()": FunctionFragment;
    "completeBuy(uint256,uint256,(bytes,bytes32,uint256,bytes,bytes),uint256)": FunctionFragment;
    "completeSell(uint256,uint256,(bytes,bytes32,uint256,bytes,bytes),uint256)": FunctionFragment;
    "escrows(uint256)": FunctionFragment;
    "initiateBuy(uint256,uint128)": FunctionFragment;
    "initiateSell(uint256,uint128,bytes20)": FunctionFragment;
    "nextOrderID()": FunctionFragment;
    "orderbook(uint256)": FunctionFragment;
    "postAsk(uint256,bytes20)": FunctionFragment;
    "postBid(uint256,uint256)": FunctionFragment;
    "stakePercent()": FunctionFragment;
    "timeout(uint256)": FunctionFragment;
    "withdrawAsk(uint256)": FunctionFragment;
    "withdrawBid(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "btcVerifier"
      | "completeBuy"
      | "completeSell"
      | "escrows"
      | "initiateBuy"
      | "initiateSell"
      | "nextOrderID"
      | "orderbook"
      | "postAsk"
      | "postBid"
      | "stakePercent"
      | "timeout"
      | "withdrawAsk"
      | "withdrawBid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "btcVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeBuy",
    values: [BigNumberish, BigNumberish, BtcTxProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSell",
    values: [BigNumberish, BigNumberish, BtcTxProofStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrows",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateBuy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateSell",
    values: [BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nextOrderID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderbook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postAsk",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "postBid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timeout",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAsk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBid",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "btcVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrows", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOrderID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderbook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeout", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAsk",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBid",
    data: BytesLike
  ): Result;

  events: {
    "EscrowSettled(uint256,uint256,address,uint256)": EventFragment;
    "EscrowSlashed(uint256,uint256,address,uint256)": EventFragment;
    "OrderMatched(uint256,uint256,int128,uint128,uint256,address,address)": EventFragment;
    "OrderPlaced(uint256,int128,uint128,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EscrowSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EscrowSlashed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderMatched"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPlaced"): EventFragment;
}

export interface EscrowSettledEventObject {
  escrowID: BigNumber;
  amountSats: BigNumber;
  ethDest: string;
  ethAmount: BigNumber;
}
export type EscrowSettledEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  EscrowSettledEventObject
>;

export type EscrowSettledEventFilter = TypedEventFilter<EscrowSettledEvent>;

export interface EscrowSlashedEventObject {
  escrowID: BigNumber;
  escrowDeadline: BigNumber;
  ethDest: string;
  ethAmount: BigNumber;
}
export type EscrowSlashedEvent = TypedEvent<
  [BigNumber, BigNumber, string, BigNumber],
  EscrowSlashedEventObject
>;

export type EscrowSlashedEventFilter = TypedEventFilter<EscrowSlashedEvent>;

export interface OrderMatchedEventObject {
  escrowID: BigNumber;
  orderID: BigNumber;
  amountSats: BigNumber;
  priceWeiPerSat: BigNumber;
  takerStakedWei: BigNumber;
  maker: string;
  taker: string;
}
export type OrderMatchedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, string, string],
  OrderMatchedEventObject
>;

export type OrderMatchedEventFilter = TypedEventFilter<OrderMatchedEvent>;

export interface OrderPlacedEventObject {
  orderID: BigNumber;
  amountSats: BigNumber;
  priceWeiPerSat: BigNumber;
  makerStakedWei: BigNumber;
  maker: string;
}
export type OrderPlacedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, string],
  OrderPlacedEventObject
>;

export type OrderPlacedEventFilter = TypedEventFilter<OrderPlacedEvent>;

export interface Portal extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PortalInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    btcVerifier(overrides?: CallOverrides): Promise<[string]>;

    completeBuy(
      escrowID: BigNumberish,
      bitcoinBlockNum: BigNumberish,
      bitcoinTransactionProof: BtcTxProofStruct,
      txOutIx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeSell(
      escrowID: BigNumberish,
      bitcoinBlockNum: BigNumberish,
      bitcoinTransactionProof: BtcTxProofStruct,
      txOutIx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    escrows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string] & {
        destScriptHash: string;
        amountSatsDue: BigNumber;
        deadline: BigNumber;
        escrowWei: BigNumber;
        successRecipient: string;
        timeoutRecipient: string;
      }
    >;

    initiateBuy(
      orderID: BigNumberish,
      amountSats: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateSell(
      orderID: BigNumberish,
      amountSats: BigNumberish,
      destScriptHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nextOrderID(overrides?: CallOverrides): Promise<[BigNumber]>;

    orderbook(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        maker: string;
        amountSats: BigNumber;
        priceWeiPerSat: BigNumber;
        scriptHash: string;
        stakedWei: BigNumber;
      }
    >;

    postAsk(
      priceWeiPerSat: BigNumberish,
      scriptHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    postBid(
      amountSats: BigNumberish,
      priceWeiPerSat: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    timeout(
      escrowID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAsk(
      orderID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawBid(
      orderID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  btcVerifier(overrides?: CallOverrides): Promise<string>;

  completeBuy(
    escrowID: BigNumberish,
    bitcoinBlockNum: BigNumberish,
    bitcoinTransactionProof: BtcTxProofStruct,
    txOutIx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeSell(
    escrowID: BigNumberish,
    bitcoinBlockNum: BigNumberish,
    bitcoinTransactionProof: BtcTxProofStruct,
    txOutIx: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  escrows(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string, string] & {
      destScriptHash: string;
      amountSatsDue: BigNumber;
      deadline: BigNumber;
      escrowWei: BigNumber;
      successRecipient: string;
      timeoutRecipient: string;
    }
  >;

  initiateBuy(
    orderID: BigNumberish,
    amountSats: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateSell(
    orderID: BigNumberish,
    amountSats: BigNumberish,
    destScriptHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nextOrderID(overrides?: CallOverrides): Promise<BigNumber>;

  orderbook(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber] & {
      maker: string;
      amountSats: BigNumber;
      priceWeiPerSat: BigNumber;
      scriptHash: string;
      stakedWei: BigNumber;
    }
  >;

  postAsk(
    priceWeiPerSat: BigNumberish,
    scriptHash: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  postBid(
    amountSats: BigNumberish,
    priceWeiPerSat: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakePercent(overrides?: CallOverrides): Promise<BigNumber>;

  timeout(
    escrowID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAsk(
    orderID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawBid(
    orderID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    btcVerifier(overrides?: CallOverrides): Promise<string>;

    completeBuy(
      escrowID: BigNumberish,
      bitcoinBlockNum: BigNumberish,
      bitcoinTransactionProof: BtcTxProofStruct,
      txOutIx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeSell(
      escrowID: BigNumberish,
      bitcoinBlockNum: BigNumberish,
      bitcoinTransactionProof: BtcTxProofStruct,
      txOutIx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    escrows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string, string] & {
        destScriptHash: string;
        amountSatsDue: BigNumber;
        deadline: BigNumber;
        escrowWei: BigNumber;
        successRecipient: string;
        timeoutRecipient: string;
      }
    >;

    initiateBuy(
      orderID: BigNumberish,
      amountSats: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateSell(
      orderID: BigNumberish,
      amountSats: BigNumberish,
      destScriptHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextOrderID(overrides?: CallOverrides): Promise<BigNumber>;

    orderbook(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        maker: string;
        amountSats: BigNumber;
        priceWeiPerSat: BigNumber;
        scriptHash: string;
        stakedWei: BigNumber;
      }
    >;

    postAsk(
      priceWeiPerSat: BigNumberish,
      scriptHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postBid(
      amountSats: BigNumberish,
      priceWeiPerSat: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakePercent(overrides?: CallOverrides): Promise<BigNumber>;

    timeout(escrowID: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawAsk(
      orderID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBid(
      orderID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EscrowSettled(uint256,uint256,address,uint256)"(
      escrowID?: null,
      amountSats?: null,
      ethDest?: null,
      ethAmount?: null
    ): EscrowSettledEventFilter;
    EscrowSettled(
      escrowID?: null,
      amountSats?: null,
      ethDest?: null,
      ethAmount?: null
    ): EscrowSettledEventFilter;

    "EscrowSlashed(uint256,uint256,address,uint256)"(
      escrowID?: null,
      escrowDeadline?: null,
      ethDest?: null,
      ethAmount?: null
    ): EscrowSlashedEventFilter;
    EscrowSlashed(
      escrowID?: null,
      escrowDeadline?: null,
      ethDest?: null,
      ethAmount?: null
    ): EscrowSlashedEventFilter;

    "OrderMatched(uint256,uint256,int128,uint128,uint256,address,address)"(
      escrowID?: null,
      orderID?: null,
      amountSats?: null,
      priceWeiPerSat?: null,
      takerStakedWei?: null,
      maker?: null,
      taker?: null
    ): OrderMatchedEventFilter;
    OrderMatched(
      escrowID?: null,
      orderID?: null,
      amountSats?: null,
      priceWeiPerSat?: null,
      takerStakedWei?: null,
      maker?: null,
      taker?: null
    ): OrderMatchedEventFilter;

    "OrderPlaced(uint256,int128,uint128,uint256,address)"(
      orderID?: null,
      amountSats?: null,
      priceWeiPerSat?: null,
      makerStakedWei?: null,
      maker?: null
    ): OrderPlacedEventFilter;
    OrderPlaced(
      orderID?: null,
      amountSats?: null,
      priceWeiPerSat?: null,
      makerStakedWei?: null,
      maker?: null
    ): OrderPlacedEventFilter;
  };

  estimateGas: {
    btcVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    completeBuy(
      escrowID: BigNumberish,
      bitcoinBlockNum: BigNumberish,
      bitcoinTransactionProof: BtcTxProofStruct,
      txOutIx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeSell(
      escrowID: BigNumberish,
      bitcoinBlockNum: BigNumberish,
      bitcoinTransactionProof: BtcTxProofStruct,
      txOutIx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    escrows(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    initiateBuy(
      orderID: BigNumberish,
      amountSats: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateSell(
      orderID: BigNumberish,
      amountSats: BigNumberish,
      destScriptHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nextOrderID(overrides?: CallOverrides): Promise<BigNumber>;

    orderbook(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postAsk(
      priceWeiPerSat: BigNumberish,
      scriptHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    postBid(
      amountSats: BigNumberish,
      priceWeiPerSat: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakePercent(overrides?: CallOverrides): Promise<BigNumber>;

    timeout(
      escrowID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAsk(
      orderID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawBid(
      orderID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    btcVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeBuy(
      escrowID: BigNumberish,
      bitcoinBlockNum: BigNumberish,
      bitcoinTransactionProof: BtcTxProofStruct,
      txOutIx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeSell(
      escrowID: BigNumberish,
      bitcoinBlockNum: BigNumberish,
      bitcoinTransactionProof: BtcTxProofStruct,
      txOutIx: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    escrows(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateBuy(
      orderID: BigNumberish,
      amountSats: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateSell(
      orderID: BigNumberish,
      amountSats: BigNumberish,
      destScriptHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nextOrderID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderbook(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postAsk(
      priceWeiPerSat: BigNumberish,
      scriptHash: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    postBid(
      amountSats: BigNumberish,
      priceWeiPerSat: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timeout(
      escrowID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAsk(
      orderID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBid(
      orderID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
