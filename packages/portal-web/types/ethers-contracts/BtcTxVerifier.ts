/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type BtcTxProofStruct = {
  blockHeader: PromiseOrValue<BytesLike>;
  txId: PromiseOrValue<BytesLike>;
  txIndex: PromiseOrValue<BigNumberish>;
  txMerkleProof: PromiseOrValue<BytesLike>;
  rawTx: PromiseOrValue<BytesLike>;
};

export type BtcTxProofStructOutput = [
  string,
  string,
  BigNumber,
  string,
  string
] & {
  blockHeader: string;
  txId: string;
  txIndex: BigNumber;
  txMerkleProof: string;
  rawTx: string;
};

export interface BtcTxVerifierInterface extends utils.Interface {
  functions: {
    "mirror()": FunctionFragment;
    "verifyPayment(uint256,uint256,(bytes,bytes32,uint256,bytes,bytes),uint256,bytes20,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "mirror" | "verifyPayment"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "mirror", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyPayment",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      BtcTxProofStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "mirror", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyPayment",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BtcTxVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BtcTxVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mirror(overrides?: CallOverrides): Promise<[string]>;

    verifyPayment(
      minConfirmations: PromiseOrValue<BigNumberish>,
      blockNum: PromiseOrValue<BigNumberish>,
      inclusionProof: BtcTxProofStruct,
      txOutIx: PromiseOrValue<BigNumberish>,
      destScriptHash: PromiseOrValue<BytesLike>,
      amountSats: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  mirror(overrides?: CallOverrides): Promise<string>;

  verifyPayment(
    minConfirmations: PromiseOrValue<BigNumberish>,
    blockNum: PromiseOrValue<BigNumberish>,
    inclusionProof: BtcTxProofStruct,
    txOutIx: PromiseOrValue<BigNumberish>,
    destScriptHash: PromiseOrValue<BytesLike>,
    amountSats: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    mirror(overrides?: CallOverrides): Promise<string>;

    verifyPayment(
      minConfirmations: PromiseOrValue<BigNumberish>,
      blockNum: PromiseOrValue<BigNumberish>,
      inclusionProof: BtcTxProofStruct,
      txOutIx: PromiseOrValue<BigNumberish>,
      destScriptHash: PromiseOrValue<BytesLike>,
      amountSats: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    mirror(overrides?: CallOverrides): Promise<BigNumber>;

    verifyPayment(
      minConfirmations: PromiseOrValue<BigNumberish>,
      blockNum: PromiseOrValue<BigNumberish>,
      inclusionProof: BtcTxProofStruct,
      txOutIx: PromiseOrValue<BigNumberish>,
      destScriptHash: PromiseOrValue<BytesLike>,
      amountSats: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mirror(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyPayment(
      minConfirmations: PromiseOrValue<BigNumberish>,
      blockNum: PromiseOrValue<BigNumberish>,
      inclusionProof: BtcTxProofStruct,
      txOutIx: PromiseOrValue<BigNumberish>,
      destScriptHash: PromiseOrValue<BytesLike>,
      amountSats: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
