/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface BtcMirrorInterface extends utils.Interface {
  functions: {
    "getBlockHash(uint256)": FunctionFragment;
    "getLatestBlockHeight()": FunctionFragment;
    "getLatestBlockTime()": FunctionFragment;
    "getTarget(bytes32)": FunctionFragment;
    "submit(uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBlockHash"
      | "getLatestBlockHeight"
      | "getLatestBlockTime"
      | "getTarget"
      | "submit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestBlockHeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTarget",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submit",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestBlockHeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTarget", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "submit", data: BytesLike): Result;

  events: {
    "NewTip(uint256,uint256,bytes32)": EventFragment;
    "NewTotalDifficultySinceRetarget(uint256,uint256,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewTip"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewTotalDifficultySinceRetarget"
  ): EventFragment;
}

export interface NewTipEventObject {
  blockHeight: BigNumber;
  blockTime: BigNumber;
  blockHash: string;
}
export type NewTipEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  NewTipEventObject
>;

export type NewTipEventFilter = TypedEventFilter<NewTipEvent>;

export interface NewTotalDifficultySinceRetargetEventObject {
  blockHeight: BigNumber;
  totalDifficulty: BigNumber;
  newDifficultyBits: number;
}
export type NewTotalDifficultySinceRetargetEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  NewTotalDifficultySinceRetargetEventObject
>;

export type NewTotalDifficultySinceRetargetEventFilter =
  TypedEventFilter<NewTotalDifficultySinceRetargetEvent>;

export interface BtcMirror extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BtcMirrorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBlockHash(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getLatestBlockHeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLatestBlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTarget(bits: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    submit(
      blockHeight: BigNumberish,
      blockHeaders: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getBlockHash(
    number: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getLatestBlockHeight(overrides?: CallOverrides): Promise<BigNumber>;

  getLatestBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  getTarget(bits: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  submit(
    blockHeight: BigNumberish,
    blockHeaders: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBlockHash(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getLatestBlockHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTarget(bits: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    submit(
      blockHeight: BigNumberish,
      blockHeaders: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewTip(uint256,uint256,bytes32)"(
      blockHeight?: null,
      blockTime?: null,
      blockHash?: null
    ): NewTipEventFilter;
    NewTip(
      blockHeight?: null,
      blockTime?: null,
      blockHash?: null
    ): NewTipEventFilter;

    "NewTotalDifficultySinceRetarget(uint256,uint256,uint32)"(
      blockHeight?: null,
      totalDifficulty?: null,
      newDifficultyBits?: null
    ): NewTotalDifficultySinceRetargetEventFilter;
    NewTotalDifficultySinceRetarget(
      blockHeight?: null,
      totalDifficulty?: null,
      newDifficultyBits?: null
    ): NewTotalDifficultySinceRetargetEventFilter;
  };

  estimateGas: {
    getBlockHash(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestBlockHeight(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    getTarget(bits: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    submit(
      blockHeight: BigNumberish,
      blockHeaders: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBlockHash(
      number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestBlockHeight(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestBlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTarget(
      bits: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submit(
      blockHeight: BigNumberish,
      blockHeaders: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
