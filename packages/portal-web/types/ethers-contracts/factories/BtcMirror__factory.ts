/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BtcMirror, BtcMirrorInterface } from "../BtcMirror";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockHeight",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "blockTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "initialExpectedTarget",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "blockHeight",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockTime",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    name: "NewTip",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "blockHeight",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalDifficulty",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "newDifficultyBits",
        type: "uint32",
      },
    ],
    name: "NewTotalDifficultySinceRetarget",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestBlockHeight",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestBlockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "bits",
        type: "bytes32",
      },
    ],
    name: "getTarget",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockHeight",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "blockHeaders",
        type: "bytes",
      },
    ],
    name: "submit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610d85380380610d8583398101604081905261002f91610050565b60008481526002602052604081209390935592909155600155600455610086565b6000806000806080858703121561006657600080fd5b505082516020840151604085015160609095015191969095509092509050565b610cf0806100956000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806332c258321461005c578063a9c2d7ab14610072578063d1a2eab214610085578063e875aa5d1461009a578063ee82ac5e146100a2575b600080fd5b6001545b60405190815260200160405180910390f35b610060610080366004610a75565b6100c2565b610098610093366004610a8e565b610104565b005b600054610060565b6100606100b0366004610a75565b60009081526002602052604090205490565b6000600382811a90600284901a600890811b600186901a17901b84841a179083906100ed9084610b20565b6100f8906008610b37565b9190911b949350505050565b6000610111605083610b6c565b90508161011f826050610b37565b146101675760405162461bcd60e51b81526020600482015260136024820152720eee4dedcce40d0cac2c8cae440d8cadccee8d606b1b60448201526064015b60405180910390fd5b600081116101b75760405162461bcd60e51b815260206004820152601e60248201527f6d757374207375626d6974206174206c65617374206f6e6520626c6f636b0000604482015260640161015e565b600060016101c58387610b80565b6101cf9190610b20565b905060006101df6107e087610b6c565b905060006101ef6107e084610b6c565b905060006107e06000546102039190610b6c565b9050808314801561021357508082145b156102cf5760005484116102695760405162461bcd60e51b815260206004820152601760248201527f636861696e207365676d656e7420746f6f2073686f7274000000000000000000604482015260640161015e565b60005b858110156102c9576102b7610281828b610b80565b898961028e856050610b37565b9061029a866001610b80565b6102a5906050610b37565b926102b293929190610b98565b610654565b806102c181610bc2565b91505061026c565b50610587565b6102da600182610b20565b8310156103295760405162461bcd60e51b815260206004820152601760248201527f616e6369656e7420726574617267657420706572696f64000000000000000000604482015260640161015e565b8082101561038b5760405162461bcd60e51b815260206004820152602960248201527f636861696e207365676d656e7420656e647320696e206f6c6420726574617267604482015268195d081c195c9a5bd960ba1b606482015260840161015e565b6000610399836107e0610b37565b90506000600019838514156103e1576000836000546103b89190610b20565b6103c3906001610b80565b9050600454826103d39190610b6c565b6103dd9082610b37565b9250505b60005b88811015610418576104066103f9828e610b80565b8c8c61028e856050610b37565b8061041081610bc2565b9150506103e4565b5060006104258489610b20565b610430906001610b80565b90506000600454836104429190610b6c565b61044c9083610b37565b905083811161049d5760405162461bcd60e51b815260206004820152601860248201527f746f74616c20646966666963756c747920746f6f206c6f770000000000000000604482015260640161015e565b60006104aa60088d610b20565b905060006104fb8e838f6104bf826004610b80565b926104cc93929190610b98565b6104d591610bdd565b60d881901c63ff00ff001662ff00ff60e89290921c9190911617601081811b91901c1790565b604080518d81526020810186905263ffffffff83168183015290519192507f452ea9c9e4985cb8cc7199131fd292d600dae30f407e749b6ca7e7f4c7690cf7919081900360600190a160006105518c6001610b80565b90505b600054811161057e576000818152600260205260408120558061057681610bc2565b915050610554565b50505050505050505b6000848155610597600c88610b20565b905060008882896105a9826004610b80565b926105b693929190610b98565b6105bf91610bdd565b60e01c90506105ec81600881811c62ff00ff1663ff00ff009290911b9190911617601081811c91901b1790565b63ffffffff1660018190556000878152600260205260409020547f11cedc7f83a9a6f5228b8fcd3c3c0ae686a51e2e04ea46923e3491a32a4bbaa89188916040805193845260208401929092529082015260600160405180910390a150505050505050505050565b6050811461066457610664610c0d565b60006107be610677602460048587610b98565b61068091610c23565b7bffffffff000000000000000000000000ffffffff00000000000000007eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000600883811c9182167fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000009490911b93841617601090811c7cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff9092167dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff009094169390931790921b91909117602081811c9283167fffffffff000000000000000000000000ffffffff0000000000000000000000009290911b91821617604090811c73ffffffff000000000000000000000000ffffffff90931677ffffffff000000000000000000000000ffffffff0000000090921691909117901b17608081811c91901b1790565b9050600260006107cf600187610b20565b81526020019081526020016000205481146108195760405162461bcd60e51b815260206004820152600a602482015269189859081c185c995b9d60b21b604482015260640161015e565b806108665760405162461bcd60e51b815260206004820152601e60248201527f706172656e7420626c6f636b206e6f7420796574207375626d69747465640000604482015260640161015e565b600061092a600280868660405161087e929190610c42565b602060405180830381855afa15801561089b573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906108be9190610c52565b6040516020016108d091815260200190565b60408051601f19818403018152908290526108ea91610c6b565b602060405180830381855afa158015610907573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106809190610c52565b9050600061093c604c60488688610b98565b61094591610c23565b90506000610952826100c2565b90508083106109a35760405162461bcd60e51b815260206004820152601760248201527f626c6f636b20686173682061626f766520746172676574000000000000000000604482015260640161015e565b6109af6107e088610ca6565b610a1257600454600282901c10610a085760405162461bcd60e51b815260206004820152601860248201527f3c32352520646966666963756c74792072657461726765740000000000000000604482015260640161015e565b6004819055610a5b565b6004548114610a5b5760405162461bcd60e51b815260206004820152601560248201527477726f6e6720646966666963756c7479206269747360581b604482015260640161015e565b505060009485526002602052604090942093909355505050565b600060208284031215610a8757600080fd5b5035919050565b600080600060408486031215610aa357600080fd5b83359250602084013567ffffffffffffffff80821115610ac257600080fd5b818601915086601f830112610ad657600080fd5b813581811115610ae557600080fd5b876020828501011115610af757600080fd5b6020830194508093505050509250925092565b634e487b7160e01b600052601160045260246000fd5b600082821015610b3257610b32610b0a565b500390565b6000816000190483118215151615610b5157610b51610b0a565b500290565b634e487b7160e01b600052601260045260246000fd5b600082610b7b57610b7b610b56565b500490565b60008219821115610b9357610b93610b0a565b500190565b60008085851115610ba857600080fd5b83861115610bb557600080fd5b5050820193919092039150565b6000600019821415610bd657610bd6610b0a565b5060010190565b6001600160e01b03198135818116916004851015610c055780818660040360031b1b83161692505b505092915050565b634e487b7160e01b600052600160045260246000fd5b80356020831015610c3c57600019602084900360031b1b165b92915050565b8183823760009101908152919050565b600060208284031215610c6457600080fd5b5051919050565b6000825160005b81811015610c8c5760208186018101518583015201610c72565b81811115610c9b576000828501525b509190910192915050565b600082610cb557610cb5610b56565b50069056fea264697066735822122070911939fc890426550f9c2612d0160d198e9746c777d93639ae69c994f82d5d64736f6c634300080c0033";

type BtcMirrorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BtcMirrorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BtcMirror__factory extends ContractFactory {
  constructor(...args: BtcMirrorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    blockHeight: BigNumberish,
    blockHash: BytesLike,
    blockTime: BigNumberish,
    initialExpectedTarget: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BtcMirror> {
    return super.deploy(
      blockHeight,
      blockHash,
      blockTime,
      initialExpectedTarget,
      overrides || {}
    ) as Promise<BtcMirror>;
  }
  override getDeployTransaction(
    blockHeight: BigNumberish,
    blockHash: BytesLike,
    blockTime: BigNumberish,
    initialExpectedTarget: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      blockHeight,
      blockHash,
      blockTime,
      initialExpectedTarget,
      overrides || {}
    );
  }
  override attach(address: string): BtcMirror {
    return super.attach(address) as BtcMirror;
  }
  override connect(signer: Signer): BtcMirror__factory {
    return super.connect(signer) as BtcMirror__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BtcMirrorInterface {
    return new utils.Interface(_abi) as BtcMirrorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BtcMirror {
    return new Contract(address, _abi, signerOrProvider) as BtcMirror;
  }
}
